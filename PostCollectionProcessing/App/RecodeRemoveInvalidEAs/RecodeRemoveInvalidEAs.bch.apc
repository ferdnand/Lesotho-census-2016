{
Validate EAs and EAs and recode invalid EAs. 

Input: Main data file
	   External data file (EARECODE_DICT) that maps old EA to new EA
Output: Main data file with updated EAs, cases with invalid EAs stripped out.

}

PROC GLOBAL
numeric totalCases = 0;

// return true if all digits of s are numeric
function isNumeric(string s)
	if s = "" then
		isNumeric = 0;
		exit;
	endif;
	
	numeric i;
	do i = 1 while i < length(s)
		if not tonumber(s[i:1]) in 0:9 then
			isNumeric = 0;
			exit;
		endif;
	enddo;
	isNumeric = 1;
end;

function districtFromEA(eacode)
	districtFromEA = int(eacode/1000000000);
end;

function constituencyFromEA(eacode)
	constituencyFromEA = int(eacode/10000000) % 100;
end;

function string communityCouncilFromEA(eacode)
// TODO
// Fill in logic to assign letter portion of 
// of community council. This gets the numeric
// portion (2 digits) which should be preceeded by
// a letter.
	communityCouncilFromEA = maketext("%02d", int(eacode/100000) % 100);
end;

function zoneFromEA(eacode)
	zoneFromEA = int(eacode/10000) % 10;
end;

function settlementFromEA(eacode)
	settlementFromEA = int(eacode/1000) % 10;
end;

PROC HOUSEHOLDDATAENTRY_FF

PROC LESOTHOCENSUS2016_QUEST
inc(totalCases);

PROC ENUMERATOR_CODE

// Remove cases where the enumerator code is all numeric since these were leftover files on the tablets from training
// The final enumerator codes are alphanumeric.
if isNumeric(strip(ENUMERATOR_CODE)) then
	errmsg("Removing case with numeric enumerator code %s", ENUMERATOR_CODE) denom = totalCases;
	skip case;
endif;

// Recode EA if it is an invalid one
EAR_ORIGINAL_EA = ENUMERATION_AREA;
if loadcase(EARECODE_DICT, EAR_ORIGINAL_EA) then
	errmsg("Recoding EA %011d --> %011d", ENUMERATION_AREA, EAR_NEW_EA);
	impute(ENUMERATION_AREA, EAR_NEW_EA);
	DISTRICT = districtFromEa(EAR_NEW_EA);
	CONSTITUENCY = constituencyFromEa(EAR_NEW_EA);
	COMMUNITY_COUNCIL = communityCouncilFromEa(EAR_NEW_EA);
	ZONE = zoneFromEA(EAR_NEW_EA);
	SETTLEMENT = settlementFromEA(EAR_NEW_EA);

endif;
