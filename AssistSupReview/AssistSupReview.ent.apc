{Application 'ASSISTSUPREVIEW' logic file generated by CSPro}
PROC GLOBAL
file pffFile;

function CreateAndRunPFF()

	string assistSupReviewApplicationFolder = pathname(Application);
	string menuApplicationFolder = assistSupReviewApplicationFolder + "../Menu/";
	string pffFilename =  menuApplicationFolder  + "LesothoCensusMenu.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 6.1");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=2016 LESOTHO PHC");

	filewrite(pffFile,"[DataEntryInit]");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%sLesothoCensusMenu.ent", menuApplicationFolder);
	filewrite(pffFile,"InputData=%smenu.dat",menuApplicationFolder);
	
	filewrite(pffFile,"[ExternalFiles]");
	filewrite(pffFile,"LESOTHOCENSUS2016_DICT=%sdummy.dat",menuApplicationFolder);
	filewrite(pffFile,"STAFF_DICT=%sstaff.dat",menuApplicationFolder);
	filewrite(pffFile,"ASS_SUP_DICT=%sAssSup.dat",menuApplicationFolder);

	filewrite(pffFile,"[UserFiles]");
	filewrite(pffFile,"TMPFILE=%s","");
	filewrite(pffFile,"SR_PFFFILE=%s","");
	filewrite(pffFile,"TEMPFILE=%s","");
	filewrite(pffFile,"PFFFILE=%s","");

	close(pffFile);

	numeric result = execpff(filename(pffFile), stop);
	if result <> 1 then
		errmsg("Failed to launch menu application");
		reenter;
	endif;
end;

PROC ASSISTSUPREVIEW_FF


PROC RV_LESOTHOCENSUS2016_QUEST

preproc
// Fill in occurrence labels for individual rosters
// in case we are coming into a partially saved case or
// are in modify mode in which case the names have been entered
// but are not yet set in case tree since we have not yet gotten
// to field B2 (names).
numeric i;
do i = 1 while i <= maxocc(NAMES_ROSTER)
	string occurrenceLabel;
	if i <= totocc(NAMES_ROSTER) then
		occurrenceLabel = strip(RV_B2(i));
	else
		// Work around bug in CSPro where when entering a new case
		// the occurrence labels from the previous case are still there.
		// This will replace the occurrence label with the row number 1,2,3...
		occurrenceLabel = maketext("%d", i);
	endif;
	setocclabel(NAMES_ROSTER(i), occurrenceLabel);			
	setocclabel(DEMOGRAPHICS_ROSTER(i), occurrenceLabel);			
enddo;

postproc
// Finished post-checking household, now go back to select another household to post-check
// or perform other activities

CreateAndRunPFF();
PROC IDENTIFICATION_FORM

PROC RV_DISTRICT
preproc

if sysparm("DISTRICT") <> "" then
	// Fill in id-items that were passed in from pff file as parameters
	RV_DISTRICT = tonumber(sysparm("DISTRICT"));
	RV_CONSTITUENCY = tonumber(sysparm("CONSTITUENCY"));
	RV_COMMUNITY_COUNCIL = sysparm("COMMUNITY_COUNCIL");
	RV_ZONE = tonumber(sysparm("ZONE"));
	RV_SETTLEMENT = tonumber(sysparm("SETTLEMENT"));
	RV_ENUMERATION_AREA = tonumber(sysparm("ENUMERATION_AREA"));
	RV_WARD = tonumber(sysparm("WARD"));
	RV_VILLAGE_NUMBER = tonumber(sysparm("VILLAGE_NUMBER"));
	RV_HOUSEHOLD_NUMBER = tonumber(sysparm("HOUSEHOLD_NUMBER"));
	
	// Make protected so interviewer cannot change id-items
	set attributes (RV_DISTRICT, RV_CONSTITUENCY, RV_COMMUNITY_COUNCIL, RV_ZONE, RV_SETTLEMENT, RV_ENUMERATION_AREA, RV_WARD, RV_VILLAGE_NUMBER,RV_HOUSEHOLD_NUMBER) protect;
endif;
PROC RV_WARD
preproc

//For a District selected in 10 districts of Lesotho,then 
//in ward only the list of the ward for chosen district should appear  

if RV_DISTRICT = 1 then
 		setvalueset (RV_WARD,RV_WARD_VS1);
	elseif RV_DISTRICT = 2 then
		setvalueset (RV_WARD,RV_WARD_VS2);
	elseif RV_DISTRICT = 3 then
		setvalueset (RV_WARD,RV_WARD_VS3);
	elseif RV_DISTRICT = 4 then
		setvalueset (RV_WARD,RV_WARD_VS4);
	elseif RV_DISTRICT = 5 then
		setvalueset (RV_WARD,RV_WARD_VS5);
	elseif RV_DISTRICT = 6 then
		setvalueset (RV_WARD,RV_WARD_VS6);	
	elseif RV_DISTRICT = 7 then
		setvalueset (RV_WARD,RV_WARD_VS7);
	elseif RV_DISTRICT = 8 then
		setvalueset (RV_WARD,RV_WARD_VS8);
	elseif RV_DISTRICT = 9 then
		setvalueset (RV_WARD,RV_WARD_VS9);
	elseif RV_DISTRICT = 10 then
		setvalueset (RV_WARD,RV_WARD_VS10);		
endif;
PROC RV_HOUSEHOLD_NUMBER

string reviewApplicationFolder = pathname(Application);
string householdApplicationFolder = reviewApplicationFolder + "../HouseholdDataEntry/";
string enumeratorDataFilename = maketext("%s%011d.dat", householdApplicationFolder, RV_ENUMERATION_AREA);

numeric result = setfile(LESOTHOCENSUS2016_DICT, enumeratorDataFileName);
if result <> 1 then
	errmsg("Unable to load enumerator data file");
	stop(1);
endif;

// Load in case (household) in enumerator data file that corresponds to our case ids.
if loadcase(LESOTHOCENSUS2016_DICT, RV_DISTRICT, RV_CONSTITUENCY, RV_COMMUNITY_COUNCIL,
			RV_ZONE, RV_ENUMERATION_AREA, RV_WARD, RV_SETTLEMENT, RV_VILLAGE_NUMBER,
			RV_HOUSEHOLD_NUMBER ) <> 1 then
	errmsg("Household not found in enumerator data file");
	reenter;
endif;

// Prefill in names in names roster from enumerator data file
numeric i;
do i = 1 while i <= count(LESOTHOCENSUS2016_DICT.INDIVIDUAL)

	{
	if i < totocc(NAMES_ROSTER) then
		insert(NAMES_ROSTER(i));
	endif;
	}
	
	RV_B1(i) = i;
	RV_B2(i) = B2(i);
enddo;


PROC RV_B2

if curocc() = 1 then
	if RV_B2 = "" then
		errmsg("Please enter name of the household member")
		select("Enter name", RV_B2);
	endif;
endif;

if RV_B2 = "" then
	errmsg("Please enter name of the household member")
	select("Enter name", RV_B2(curocc()), "Correct more people response", RV_MORE_PEOPLE(curocc() - 1));
endif;
RV_B2=toupper(RV_B2);
// Set occurrence labels for individual rosters to use name
string occurrenceLabel = strip(RV_B2);

setocclabel(NAMES_ROSTER(curocc()), occurrenceLabel);
setocclabel(DEMOGRAPHICS_ROSTER(curocc()), occurrenceLabel);
PROC RV_IN_HOUSEHOLD
preproc
// For names that supervisor entered, don't ask IN_HOUSEHOLD
if curocc() > count(LESOTHOCENSUS2016_DICT.INDIVIDUAL) then
	RV_IN_HOUSEHOLD = 1;
	noinput;
endif;
PROC RV_MORE_PEOPLE
preproc
// For names that enumerator entered, don't ask MORE_PEOPLE
if curocc() < count(LESOTHOCENSUS2016_DICT.INDIVIDUAL) then
	RV_MORE_PEOPLE = 1;
	noinput;
endif;

postproc
// If no more people in household then end roster
if RV_MORE_PEOPLE = 2 then
	endgroup;
endif;
PROC NO_OF_HOUSEHOLD_MEMBERS
preproc
// Set number of household members to size of person roster.
// We will use this as an occurrence control field for other
// rosters (demographic, fertility, disability...)
NO_OF_HOUSEHOLD_MEMBERS = totocc(NAMES_ROSTER);
PROC DEMOGRAPHICS_ROSTER

// Count number of heads of household so that we can ensure
// that there is exactly one head of household.

numeric numberOfHeads = count(DEMOGRAPHICS_ROSTER where RV_B3 = 1);

if numberOfHeads <> 1 then
	errmsg("You have entered %d heads of household. Only one head of household is allowed",
			numberOfHeads);
	reenter RV_B3(1);
endif;

// Sex of household head must be different from sex of spouse
numeric head, spouse;
head = seek(RV_B3 = 1);
{
if B19(head) in 2:3,5 then
	//Check each spouse in the household
	do spouse = 1 while spouse <= totocc(DEMOGRAPHIC_ROSTER)
		if B3(spouse) = 2 then
			//Check for same sex
			if B4(spouse) = B4(head) then
				errmsg("If %s is %s's spouse, then they must be of opposite sex",
					   strip(B2(spouse)), strip(B2(head)))
				select("Correct household head sex", B4(head),
					   "Correct spouse relationship", B3(spouse),
					   "Correct spouse sex", B4(spouse));
			endif;
			//Check for different marrital status
			if B19(spouse) <> B19(head) then
				errmsg("If %s is %s's spouse, then they must have the same marital status",
					   strip(B2(spouse)), strip(B2(head)))
				select("Correct household head marital status", B19(head),
					   "Correct spouse relationship", B3(spouse),
					   "Correct spouse marital status", B19(spouse));
			endif;
		endif;
	enddo;
endif;
}
PROC RV_B3

preproc
//a person who is not the member of this household should not be
//asked this question
if RV_IN_HOUSEHOLD(curocc()) = 2 then
 skip to next;
endif;

postproc
// For individuals that are also in enumerator data file (current row < rows in enumerator file),
// compare relationship entered by enumerator with that entered by supervisor
if curocc() <= count(LESOTHOCENSUS2016_DICT.INDIVIDUAL) then
	if RV_B3 <> B3(curocc()) then
		errmsg("Relationship does not match relationship entered by enumerator")
		select("Correct Relationship",RV_B3(curocc()),"Accept", continue);
	endif;
endif;
PROC RV_B4

postproc
// For individuals that are also in enumerator data file (current row < rows in enumerator file),
// compare sex entered by enumerator with that entered by supervisor
if curocc() <= count(LESOTHOCENSUS2016_DICT.INDIVIDUAL) then
	if RV_B4 <> B4(curocc()) then
		errmsg("Sex does not match sex entered by enumerator")
		select("Correct Sex",RV_B4(curocc()),"Accept", continue);
	endif;
endif;
PROC RV_B5

// For individuals that are also in enumerator data file (current row < rows in enumerator file),
// compare age entered by enumerator with that entered by supervisor
if curocc() <= count(LESOTHOCENSUS2016_DICT.INDIVIDUAL) then
	if RV_B5 <> B5(curocc()) then
		errmsg("Age does not match age entered by enumerator")
		select("Correct Age",RV_B5(curocc()),"Accept", continue);
	endif;
endif;

//If head of the household is female, mother's age should be 12 years more than 
//child's age. 
numeric head = seek(RV_B3 = 1);
if RV_B4(head) = 2 then
	if RV_B3(curocc()) = 4 and RV_B5(head) < RV_B5(curocc()) + 12 then
		errmsg("%s's age should be 12 years more than %s's age",strip(RV_B2(head)),
		        strip(RV_B2(curocc())))
		select("Correct mother's age",RV_B5(head),"Correct child's age",RV_B5);
		
//If head of the household is female, grandmother's age should be 24 years 
//more than grandchild's age.		
	elseif RV_B3(curocc()) = 12 and RV_B5(head) < RV_B5(curocc()) + 24 then
		errmsg("%s's age should be 24 years more than %s's age",strip(RV_B2(head)),
		        strip(RV_B2(curocc())))
		select("Correct grandmother's age",RV_B5(head),"Correct grandchild's age",RV_B5);
	endif;
endif;
	
PROC RV_B7

postproc
// For individuals that are also in enumerator data file (current row < rows in enumerator file),
// compare residential status entered by enumerator with that entered by supervisor
if curocc() <= count(LESOTHOCENSUS2016_DICT.INDIVIDUAL) then
	if RV_B7 <> B7(curocc()) then
		errmsg("Residential status does not match that one entered by enumerator")
		select("Correct Residential",RV_B7(curocc()),"Accept", continue);
	endif;
endif;

//checks for Head and spouse are not visitors

if RV_B3 in 1,2 then
	if RV_B7 = 2 then
		errmsg("%s is the %s and should not be a visitor",
			strip(RV_B2(curocc())), getlabel(RV_B3_VS1,RV_B3(curocc())))
			select("Correct Current Residential Status",RV_B7);
	endif;
endif;

if curocc() >= totocc(NAMES_ROSTER) then 
	endgroup;
endif;
