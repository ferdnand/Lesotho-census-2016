PROC GLOBAL

// Arrays for dynamic value sets
array numeric codes(200);

array string labels(200);
array string mycodes(200);
array string mylabels(200);
array string myID(200);
array string EAarray(50);

array ageBySex5YearGroups(22, 2);

string menuApplicationFolder, householdApplicationFolder, assSupRevApplicationFolder;
string supervisorDataFileFolder, enumeratorDataFileFolder;
string loginFilename, eacode, enumeratorEA;
string enumeratorDataFileName,enumeratorDataFileNameCopy; //
string supervisorDataFilename; //
string enumtempFileName; //
numeric postChecked = 0, ea, totMales = 0, totFemales = 0, totPopulation = 0, seekingApproval = 0; //

list string fileListing; //variable to store all data files in a directory

file tmpFile;
file tempFile;
file pffFile; // File variable for writing out data entry pff file


function string getSupervisorDataFilename() // get the supervisor data filename from the enumerator data filename
	numeric lastSlash = length(enumeratorDataFileName);
	
	do while lastSlash > 0 and not enumeratorDataFileName[lastSlash:1] in "\","/"
		lastSlash = lastSlash - 1;
	enddo;
	
	// combine the file name to the supervisor data path
	getSupervisorDataFilename = maketext("%sRV%s",supervisorDataFileFolder,enumeratorDataFileName[lastSlash + 1]);

end;


//********************************************************************************************************

function OnStop() // if they try to stop adding data without finishing the case

	numeric selection;
	selection = errmsg("Are you sure you want to quit the program?")
	select("Yes",continue,"No",continue);

	if selection = 1 then
		filedelete(loginFilename);
		stop(1);
	else
		reenter;
	endif;

end;

function pickEA()
	      
    numeric i;
    
    dirlist(fileListing,enumeratorDataFileFolder,"*.dat");
        
        if length(fileListing) > 0 then
           EAarray(1) = "View All";
            do i = 1 while i <= length(fileListing)
                eacode = fileListing(i)[length(fileListing(i))-14:11];
                EAarray(i + 1) = eacode;
            enddo;
        else
            errmsg("No data files found.");
            reenter;
        endif;
        
        EAarray(i+1) = "";
        
    numeric indexChosen = accept("Choose EA", EAarray);
    if indexChosen = 0 then
        reenter;
    endif;
    
    pickEA = indexChosen - 1;
    
end;

//************************************************************************************************************

function agebysexProcessing(string eaFilename)

	setfile(LESOTHOCENSUS2016_DICT, eaFilename);
	
	locate(LESOTHOCENSUS2016_DICT, >=, "");
	while loadcase(LESOTHOCENSUS2016_DICT) <> 0 do
			
		// Loop through each individual in household
		numeric personNum;
		do personNum = 1 while personNum <= count(LESOTHOCENSUS2016_DICT.INDIVIDUAL)
			
			if (B4(personNum) in 0:130) then
				numeric ageGroup = int(low(100,B5(personNum))/5) + 1;
				   inc(ageBySex5YearGroups(ageGroup, B4(personNum)));
				   inc(ageBySex5YearGroups(22, B4(personNum)));			
			endif;
		enddo;
			
	enddo;
	close(LESOTHOCENSUS2016_DICT);

end;
//***************************************************************************************************

function  ageBySexTable()
	numeric EApicked = pickEA();// 0 = view all, 1+ = index of EA
	
	//trace(maketext("Load file: %s", maketext("%s%011d.dat", "../../Data/Enumerator/", EApicked)));
	//setfile(LESOTHOCENSUS2016_DICT, maketext("%s%s%011d.dat", pathname(Application), "../../Data/Enumerator/", EApicked));
	string reportFilename;
	string agebysex;

	//Clearing the array before generating the report,
	//to avoid double counting.
	numeric i;
	do i = 1 while i <= 22 
		ageBySex5YearGroups(i, 1) = 0;
		ageBySex5YearGroups(i, 2) = 0;
	enddo;

	if EApicked >= 1 then
		agebysexProcessing(fileListing(EApicked));
	
	else // they selected View All
		do i = 1 while i <= length(fileListing)
			agebysexProcessing(fileListing(i));
		enddo;
	
	endif;
	
	// Write out age by sex distribution to EA array that looks like:
	// var data = [
	//    {group: '0-4', male: 10, female: 12, total: 22},
	//    {group: '5-9', male: 14, female: 15, total: 29},
	//    ...
	//	  {group: '100+', male: 1, female: 1, total: 2}
	// ];

	string reportDataFilename = maketext("%sagebysex.js", pathname(Application));
	setfile(tempFile, reportDataFilename);
	
	filewrite(tempFile, "var data = {");
	filewrite(tempFile, "ageGroups: [");
  	numeric groupNum;
  	do groupNum = 1 while groupNum <= 21
  		numeric lowerBound = (groupNum - 1) * 5;
  		numeric upperBound = groupNum * 5 - 1;
  		numeric male = ageBySex5YearGroups(groupNum, 1);
  		numeric female = ageBySex5YearGroups(groupNum, 2);
  		numeric total = male + female;
  				  
  		if groupNum <= 20 then
  		   filewrite(tempFile, "{group: '%d-%d', male: %d, female: %d, total: %d},", 
  				      lowerBound, upperBound, male, female, total);
  				       
  		elseif groupNum = 21 then
  			filewrite(tempFile, "{group: '100+', male: %d, female: %d, total: %d},", 
  				       male, female, total); 
  				       
  		endif	  
  								  
	enddo;
	
	filewrite(tempFile, "],");
	// for male and female totals
	male = ageBySex5YearGroups(22, 1);
	female = ageBySex5YearGroups(22, 2);
	total = male + female;
	filewrite(tempFile, "total: {male: %d, female: %d, total: %d},", 
		       male, female, total); 
	filewrite(tempFile, "};");
	close(tempFile);

	reportFilename = maketext("%sagebysex.html", pathname(Application));
	//agebysex = maketext("%s%011d.dat", "../../Data/Enumerator/", EApicked);
	agebysex = maketext("%s%011d.dat", enumeratorDataFileFolder, EApicked);
	if getos() in 20:29 then
		// Android - use "browse:"
		execsystem(maketext("view:%s", reportFilename));
	else
		// Windows - use "explorer.exe <filename>"
		execsystem(maketext("%sexplorer.exe %s", 
						    pathname(Windows), 
						    reportFilename));
		
		//execsystem(maketext("view:%s", reportFilename));
	endif;
end;
//******************************************************************************************************

function SexRatioProcessing(string eaFilename)

	setfile(LESOTHOCENSUS2016_DICT, eaFilename);
	
	// Loop through all households 
	// until loadcase returns zero when it hits end of file.
	locate(LESOTHOCENSUS2016_DICT, >=, "");
	while loadcase(LESOTHOCENSUS2016_DICT) <> 0 do
		// Loop through each individual in household
		numeric personNum;
		do personNum = 1 while personNum <= count(LESOTHOCENSUS2016_DICT.INDIVIDUAL)
			if (B5(personNum) in 0:130) then
			   numeric ageGroup = int (low(100,B5(personNum))/5) + 1;
			   inc(ageBySex5YearGroups(ageGroup, B4(personNum)));				
			endif;
		enddo;		
	enddo;	 
	close(LESOTHOCENSUS2016_DICT);
end;

function SexRatioReport()
	//Clearing the array before generating the report,
	//to avoid double counting.
	numeric i;
	do i = 1 while i <= 21 
		ageBySex5YearGroups(i, 1) = 0;
		ageBySex5YearGroups(i, 2) = 0;
	enddo;

	numeric EApicked = pickEA(); // 0 = view all, 1+ = index of EA

	if EApicked >= 1 then
		SexRatioProcessing(fileListing(EApicked));
	
	else // they selected View All
		do i = 1 while i <= length(fileListing)
			SexRatioProcessing(fileListing(i));
		enddo;
	
	endif;
 
	string reportFilename = maketext("%sSex Ratio Report.txt", pathname(Application));
	setfile(tempFile, reportFilename);
	
	filewrite(tempFile, "Age Groups    Males      Female     Total    Sex Ratio");
	filewrite(tempFile, "------------------------------------------------------");
	
  	numeric groupNum;
  	do groupNum = 1 while groupNum <= 21
  		numeric lowerBound = (groupNum - 1) * 5;
  		numeric upperBound = groupNum * 5 - 1;
  		numeric male = ageBySex5YearGroups(groupNum, 1);
  		numeric female = ageBySex5YearGroups(groupNum, 2);
  		numeric total = male + female;
  		numeric SexRatio = (male/female) * 100;
		
		if groupNum <= 20 then
  		   filewrite(tempFile, " %3d -%3d       %3d       %3d        %3d        %3d", 
  				      lowerBound, upperBound, male, female, total, SexRatio); 
  		elseif groupNum = 21 then
  			filewrite(tempFile, "  100+          %3d       %3d        %3d         %3d", 
  				       male, female, total, SexRatio); 
  		endif	  
  	    
	enddo;
	filewrite(tempFile, "------------------------------------------------------");
	filewrite(tempFile, "--------------------END OF REPORT---------------------");
	//filewrite(tempFile, "];");
	close(tempFile);

	if getos() in 20:29 then
		// Android - use "browse:"
		execsystem(maketext("view:%s", reportFilename));
	else
		// Windows - use "explorer.exe <filename>"
		execsystem(maketext("%sexplorer.exe %s", 
						    pathname(Windows), 
						    reportFilename));
	endif;
end;

//****************************************************************************************************

function CreateAndRunPFF()

	string tempFolder = pathname(Temp);
	string pffFilename = tempFolder + "HouseholdDataEntry.pff";
	string fileDescription = maketext("EA - %s", STAFF_EA);
	
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 6.2");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=2016 LESOTHO PHC(%s)", fileDescription);

	filewrite(pffFile,"[DataEntryInit]");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%sHouseholdDataEntry.ent", householdApplicationFolder);	
	enumeratorDataFilename = maketext("%s.dat", STAFF_EA);
	filewrite(pffFile,"InputData=%s%s",enumeratorDataFileFolder,enumeratorDataFilename);

	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"DISTRICT=%02d",S_DISTRICT);
	filewrite(pffFile,"CONSTITUENCY=%02d",S_CONSTITUENCY);
	filewrite(pffFile,"COMMUNITY_COUNCIL=%s",S_COMMUNITY_COUNCIL);
	filewrite(pffFile,"ZONE=%d",S_ZONE);
	filewrite(pffFile,"SETTLEMENT=%d",S_SETTLEMENT);
	filewrite(pffFile,"ENUMERATION_AREA=%s",STAFF_EA);
	filewrite(pffFile,"STAFF_CODE=%s",USER_CODE);
	
	close(pffFile);

	numeric result = execpff(filename(pffFile), stop);
	if result <> 1 then
		errmsg("Failed to launch household data entry");
		reenter;
	endif;

end;

// File variable for writing out supervisor review pff file
file sr_pffFile;

function CreateAndRunSRPFF()

	string tempFolder = pathname(Temp);
	string pffFilename = tempFolder + "AssistSupReview.pff";
	string fileDescription = maketext("EA - %011d", ENUMERATION_AREA);

	setfile(sr_pffFile,pffFilename,create);

	filewrite(sr_pffFile,"[Run Information]");
	filewrite(sr_pffFile,"Version=CSPro 6.2");
	filewrite(sr_pffFile,"AppType=Entry");
	filewrite(sr_pffFile,"Description=2016 LESOTHO PHC(%s)", fileDescription);

	filewrite(sr_pffFile,"[DataEntryInit]");
	filewrite(sr_pffFile,"StartMode=Add;%s", key(LESOTHOCENSUS2016_DICT));	

	filewrite(sr_pffFile,"[Files]");
	filewrite(sr_pffFile,"Application=%sAssistSupReview.ent", assSupRevApplicationFolder);
	supervisorDataFilename = getSupervisorDataFilename();
	filewrite(sr_pffFile,"InputData=%s",supervisorDataFilename);

	filewrite(sr_pffFile,"[Parameters]");
	filewrite(sr_pffFile,"DISTRICT=%d",DISTRICT);
	filewrite(sr_pffFile,"CONSTITUENCY=%d",CONSTITUENCY);
	filewrite(sr_pffFile,"COMMUNITY_COUNCIL=%s",COMMUNITY_COUNCIL);
	filewrite(sr_pffFile,"ZONE=%d",ZONE);
	filewrite(sr_pffFile,"SETTLEMENT=%d",SETTLEMENT);
	filewrite(sr_pffFile,"ENUMERATION_AREA=%d",ENUMERATION_AREA);
	filewrite(sr_pffFile,"WARD=%d",WARD);
	filewrite(sr_pffFile,"VILLAGE_NUMBER=%d",VILLAGE_NUMBER);
	filewrite(sr_pffFile,"VILLAGE_NAME=%s",VILLAGE_NAME);
	filewrite(sr_pffFile,"HOUSEHOLD_NUMBER=%d",HOUSEHOLD_NUMBER);
	filewrite(sr_pffFile,"HOUSEHOLD_HEAD_NAMES=%s",HOUSEHOLD_HEAD_NAMES);
	filewrite(sr_pffFile,"STAFF_CODE=%s",USER_CODE);
	
	close(sr_pffFile);

	numeric result = execpff(filename(sr_pffFile), stop);
	if result <> 1 then
		errmsg("Failed to launch assistant supervisor review data entry");
		reenter;
	endif;

end;

//function to display data for all the enumeration areas irrespective of the date they were enumerated on.
function ShowSummaryReport()

	string reportFilename = maketext("%ssummaryreport.txt", pathname(Application));
	setfile(tempFile, reportFilename);
	filewrite(tempFile, "Enumeration Area Summary Report");
	filewrite(tempFile, "-------------------------------");
	filewrite(tempFile, "");
		
	numeric ctr;
    dirlist(fileListing,enumeratorDataFileFolder,"*.dat");
    
	do ctr = 1 while ctr <= length(fileListing)
		eacode = fileListing(ctr)[length(fileListing(ctr))-14:11];
	
		enumeratorDataFilename = maketext("%s%011s.dat", enumeratorDataFileFolder, eacode);
		
		numeric result = setfile(LESOTHOCENSUS2016_DICT, enumeratorDataFileName);
		if result <> 1 then
			errmsg("Unable to load enumerator data file");
			reenter ASSISTANT_SUPERVISOR_MENU;
		endif;
		
		// Start at first household in enumerator data file
		if locate(LESOTHOCENSUS2016_DICT, >=, "") <> 0 then	
			// Loop through all households 
			// until loadcase returns zero when it hits end of file.
			numeric i;
			numeric TotalHH =0;
			numeric CompletedHH = 0;
			numeric PartialHH = 0;
			numeric NoMember = 0;
			numeric Absent = 0;
			numeric Vacant = 0;
			numeric Destroyed = 0;
			numeric PartialSave = 0;
			totMales = 0;
			totFemales = 0;
			totPopulation = 0;
			postChecked = 0;
			seekingApproval = 0;
			do i = 0 while loadcase(LESOTHOCENSUS2016_DICT) <> 0
				if FINAL_RESULT_CODE = 1 then
					CompletedHH = CompletedHH + 1;
				elseif FINAL_RESULT_CODE = 6 then
					PartialHH = PartialHH + 1;
				elseif HOUSEHOLD_STATUS = 2 then
					NoMember = NoMember + 1;
				elseif HOUSEHOLD_STATUS = 3 then
					Absent = Absent + 1;
				elseif HOUSEHOLD_STATUS = 4 then
					Vacant = Vacant + 1;
				elseif HOUSEHOLD_STATUS = 5 then
					Destroyed = Destroyed + 1;
				elseif not FINAL_RESULT_CODE in 1,6 then
					PartialSave = PartialSave + 1;
				endif;
				TotalHH = TotalHH +1;
				
				totMales = totMales + count(LESOTHOCENSUS2016_DICT.INDIVIDUAL WHERE B4 = 1);
				totFemales = totFemales + count(LESOTHOCENSUS2016_DICT.INDIVIDUAL WHERE B4 = 2);
				if APPROVAL_STATUS = 0 then
					seekingApproval = seekingApproval + 1;
				endif;
				
			enddo;
			
			totPopulation = totMales + totFemales;
	
			// get the postcheck values
			supervisorDataFilename = getSupervisorDataFilename();			
			if fileexist(supervisorDataFilename) then
				setfile(ASSIST_SUPERVISOR_REVIEW_DICT, supervisorDataFilename);			
				// Start at first household in supervisor data file
				if locate(ASSIST_SUPERVISOR_REVIEW_DICT, >=, "") <> 0 then	
					// Loop through all households 
					// until loadcase returns zero when it hits end of file.
					do postChecked = 0 while loadcase(ASSIST_SUPERVISOR_REVIEW_DICT) <> 0
					enddo;
				endif;				
			endif;	
		endif;	
					
		filewrite(tempFile,"EA CODE: %011d",ENUMERATION_AREA);
		filewrite(tempfile,"%-30s%s","Households","Household Status");
		filewrite(tempFile,"%-30d%s",CompletedHH,getlabel(FINAL_RESULT_CODE,1));
		filewrite(tempFile,"%-30d%s",PartialHH,getlabel(FINAL_RESULT_CODE,6));
		filewrite(tempFile,"%-30d%s",NoMember,getlabel(HOUSEHOLD_STATUS,2));
		filewrite(tempFile,"%-30d%s",Absent,getlabel(HOUSEHOLD_STATUS,3));
		filewrite(tempFile,"%-30d%s",Vacant,getlabel(HOUSEHOLD_STATUS,4));
		filewrite(tempFile,"%-30d%s",Destroyed,getlabel(HOUSEHOLD_STATUS,5));
		filewrite(tempFile,"%-30dPartially saved",PartialSave);
		filewrite(tempFile, "----------------------------------------------------------");
		filewrite(tempFile,"%-30d%s",TotalHH,"Total Households");
		filewrite(tempFile,"");
		filewrite(tempFile, "==========================================================");
		filewrite(tempFile,"%-30d%s",totMales,"Total Males");
		filewrite(tempFile,"%-30d%s",totFemales,"Total Females");
		filewrite(tempFile,"%-30d%s",totPopulation,"Total Population");
		filewrite(tempFile,"%-30d%s",postChecked, "Total HH Post Checked");
		filewrite(tempFile,"%-30d%s",seekingApproval, "Total HH Seeking Supervisor's Approval");
		filewrite(tempFile,"***********************************************************");
		filewrite(tempFile,"******end of report for current enumeration area code******");
		filewrite(tempFile,"***********************************************************");
		filewrite(tempFile,"");

	enddo;
	    
	close(tempFile);
	if getos() in 20:29 then
		// Android - use "browse:"
		execsystem(maketext("view:%s", reportFilename));
	else
		// Windows - use "explorer.exe <filename>"
		execsystem(maketext("%sexplorer.exe %s", 
						    pathname(Windows), 
						    reportFilename));
	endif;
end;

//function to display data for the EA selected by the supervisor on a specific date
function ShowSummaryReport_EAbyDATE(string eacode, string viewdate)

	string reportFilename = maketext("%ssummaryreport.txt", pathname(Application));
	setfile(tempFile, reportFilename);
	filewrite(tempFile, "Enumeration Area Summary Report by Day");
	filewrite(tempFile, "-------------------------------");
	filewrite(tempFile, "");
	
		enumeratorDataFilename = maketext("%s%011s.dat", enumeratorDataFileFolder, eacode);
		// Create a dynamic value set of all completed households
		// in the enumerator data file.	
		numeric result = setfile(LESOTHOCENSUS2016_DICT, enumeratorDataFileName);
		if result <> 1 then
			errmsg("Unable to load enumerator data file");
			reenter ASSISTANT_SUPERVISOR_MENU;
		endif;
		
		// Start at first household in enumerator data file
		if locate(LESOTHOCENSUS2016_DICT, >=, "") <> 0 then
			// Loop through all households 
			// until loadcase returns zero when it hits end of file.
			numeric i;
			numeric TotalHH =0;
			numeric CompletedHH = 0;
			numeric PartialHH = 0;
			numeric NoMember = 0;
			numeric Absent = 0;
			numeric Vacant = 0;
			numeric Destroyed = 0;
			numeric PartialSave = 0;
			totMales = 0;
			totFemales = 0;
			totPopulation = 0;
			postChecked = 0;
			seekingApproval = 0;
			do i = 0 while loadcase(LESOTHOCENSUS2016_DICT) <> 0
				if viewdate = INTERVIEW_DATE then
					if FINAL_RESULT_CODE = 1 then
						CompletedHH = CompletedHH + 1;
					elseif FINAL_RESULT_CODE = 6 then
						PartialHH = PartialHH + 1;
					elseif HOUSEHOLD_STATUS = 2 then
						NoMember = NoMember + 1;
					elseif HOUSEHOLD_STATUS = 3 then
						Absent = Absent + 1;
					elseif HOUSEHOLD_STATUS = 4 then
						Vacant = Vacant + 1;
					elseif HOUSEHOLD_STATUS = 5 then
						Destroyed = Destroyed + 1;
					elseif not FINAL_RESULT_CODE in 1,6 then
						PartialSave = PartialSave + 1;
					endif;
					TotalHH = TotalHH +1;
				
					totMales = totMales + count(LESOTHOCENSUS2016_DICT.INDIVIDUAL WHERE B4 = 1);
					totFemales = totFemales + count(LESOTHOCENSUS2016_DICT.INDIVIDUAL WHERE B4 = 2);
					
					if APPROVAL_STATUS = 0 then
						seekingApproval = seekingApproval + 1;
					endif;
				endif;
			enddo;
			
			totPopulation = totMales + totFemales;
			
			if viewdate = POSTCHECKING_DATE then
				// get the postcheck values
				supervisorDataFilename = getSupervisorDataFilename();
				
				if fileexist(supervisorDataFilename) then
	
					setfile(ASSIST_SUPERVISOR_REVIEW_DICT, supervisorDataFilename);
				
					// Start at first household in supervisor data file
					if locate(ASSIST_SUPERVISOR_REVIEW_DICT, >=, "") <> 0 then	
						// Loop through all households 
						// until loadcase returns zero when it hits end of file.
						do postChecked = 0 while loadcase(ASSIST_SUPERVISOR_REVIEW_DICT) <> 0
						enddo;
					endif;				
				endif;
			endif;
		endif;		
		filewrite(tempFile,"DATE: %s", viewdate);
		filewrite(tempFile,"EA CODE: %011d",ENUMERATION_AREA);
		//filewrite(tempfile,"Households%s","								Household Status");
		filewrite(tempfile,"%-30s%s","Households","Household Status");
		filewrite(tempFile,"%-30d%s",CompletedHH,getlabel(FINAL_RESULT_CODE,1));
		filewrite(tempFile,"%-30d%s",PartialHH,getlabel(FINAL_RESULT_CODE,6));
		filewrite(tempFile,"%-30d%s",NoMember,getlabel(HOUSEHOLD_STATUS,2));
		filewrite(tempFile,"%-30d%s",Absent,getlabel(HOUSEHOLD_STATUS,3));
		filewrite(tempFile,"%-30d%s",Vacant,getlabel(HOUSEHOLD_STATUS,4));
		filewrite(tempFile,"%-30d%s",Destroyed,getlabel(HOUSEHOLD_STATUS,5));
		filewrite(tempFile,"%-30dPartially saved",PartialSave);
		filewrite(tempFile, "----------------------------------------------------------");
		filewrite(tempFile,"%-30d%s",TotalHH,"Total Households");
		filewrite(tempFile,"");
		filewrite(tempFile, "==========================================================");
		filewrite(tempFile,"%-30d%s",totMales,"Total Males");
		filewrite(tempFile,"%-30d%s",totFemales,"Total Females");
		filewrite(tempFile,"%-30d%s",totPopulation,"Total Population");
		filewrite(tempFile,"%-30d%s",postChecked, "Total HH Post Checked");
		filewrite(tempFile,"%-30d%s",seekingApproval, "Total HH Seeking Supervisor's Approval");
		filewrite(tempFile,"***********************************************************");
		filewrite(tempFile,"******end of report for current enumeration area code******");
		filewrite(tempFile,"***********************************************************");
		filewrite(tempFile,"");
	//enddo;
	close(tempFile);
	if getos() in 20:29 then
		// Android - use "browse:"
		execsystem(maketext("view:%s", reportFilename));
	else
		// Windows - use "explorer.exe <filename>"
		execsystem(maketext("%sexplorer.exe %s", 
						    pathname(Windows), 
						    reportFilename));
	endif;
end;

//function to display data for the EA selected by the supervisor on a specific date
function ShowSummaryReport_AllbyDATE(string viewdate)

	string reportFilename = maketext("%ssummaryreport.txt", pathname(Application));
	setfile(tempFile, reportFilename);
	filewrite(tempFile, "Enumeration Area Summary Report by Day");
	filewrite(tempFile, "-------------------------------");
	filewrite(tempFile, "");
	
	numeric ctr;
    dirlist(fileListing,enumeratorDataFileFolder,"*.dat");
    
	do ctr = 1 while ctr <= length(fileListing)
		string eacode = fileListing(ctr)[length(fileListing(ctr))-14:11];
	
		enumeratorDataFilename = maketext("%s%011s.dat", enumeratorDataFileFolder, eacode);
		// Create a dynamic value set of all completed households
		// in the enumerator data file.	
		numeric result = setfile(LESOTHOCENSUS2016_DICT, enumeratorDataFileName);
		if result <> 1 then
			errmsg("Unable to load enumerator data file");
			reenter ASSISTANT_SUPERVISOR_MENU;
		endif;
		
		// Start at first household in enumerator data file
		if locate(LESOTHOCENSUS2016_DICT, >=, "") <> 0 then
			// Loop through all households 
			// until loadcase returns zero when it hits end of file.
			numeric i;
			numeric TotalHH =0;
			numeric CompletedHH = 0;
			numeric PartialHH = 0;
			numeric NoMember = 0;
			numeric Absent = 0;
			numeric Vacant = 0;
			numeric Destroyed = 0;
			numeric PartialSave = 0;
			totMales = 0;
			totFemales = 0;
			totPopulation = 0;
			postChecked = 0;
			seekingApproval = 0;
			do i = 0 while loadcase(LESOTHOCENSUS2016_DICT) <> 0
				if viewdate = INTERVIEW_DATE then
					if FINAL_RESULT_CODE = 1 then
						CompletedHH = CompletedHH + 1;
					elseif FINAL_RESULT_CODE = 6 then
						PartialHH = PartialHH + 1;
					elseif HOUSEHOLD_STATUS = 2 then
						NoMember = NoMember + 1;
					elseif HOUSEHOLD_STATUS = 3 then
						Absent = Absent + 1;
					elseif HOUSEHOLD_STATUS = 4 then
						Vacant = Vacant + 1;
					elseif HOUSEHOLD_STATUS = 5 then
						Destroyed = Destroyed + 1;
					elseif not FINAL_RESULT_CODE in 1,6 then
						PartialSave = PartialSave + 1;
					endif;
					TotalHH = TotalHH +1;
				
					totMales = totMales + count(LESOTHOCENSUS2016_DICT.INDIVIDUAL WHERE B4 = 1);
					totFemales = totFemales + count(LESOTHOCENSUS2016_DICT.INDIVIDUAL WHERE B4 = 2);
					
					if APPROVAL_STATUS = 0 then
						seekingApproval = seekingApproval + 1;
					endif;
				endif;
			enddo;
			
			totPopulation = totMales + totFemales;
			
			if viewdate = POSTCHECKING_DATE then
				// get the postcheck values
				supervisorDataFilename = getSupervisorDataFilename();				
				if fileexist(supervisorDataFilename) then	
					setfile(ASSIST_SUPERVISOR_REVIEW_DICT, supervisorDataFilename);
					// Start at first household in supervisor data file
					if locate(ASSIST_SUPERVISOR_REVIEW_DICT, >=, "") <> 0 then	
						// Loop through all households 
						// until loadcase returns zero when it hits end of file.
						do postChecked = 0 while loadcase(ASSIST_SUPERVISOR_REVIEW_DICT) <> 0
						enddo;	
					endif;					
				endif;
			endif;
		endif;		
		filewrite(tempFile,"DATE: %s", viewdate);
		filewrite(tempFile,"EA CODE: %011d",ENUMERATION_AREA);
		//filewrite(tempfile,"Households%s","								Household Status");
		filewrite(tempfile,"%-30s%s","Households","Household Status");
		filewrite(tempFile,"%-30d%s",CompletedHH,getlabel(FINAL_RESULT_CODE,1));
		filewrite(tempFile,"%-30d%s",PartialHH,getlabel(FINAL_RESULT_CODE,6));
		filewrite(tempFile,"%-30d%s",NoMember,getlabel(HOUSEHOLD_STATUS,2));
		filewrite(tempFile,"%-30d%s",Absent,getlabel(HOUSEHOLD_STATUS,3));
		filewrite(tempFile,"%-30d%s",Vacant,getlabel(HOUSEHOLD_STATUS,4));
		filewrite(tempFile,"%-30d%s",Destroyed,getlabel(HOUSEHOLD_STATUS,5));
		filewrite(tempFile,"%-30dPartially saved",PartialSave);
		filewrite(tempFile, "----------------------------------------------------------");
		filewrite(tempFile,"%-30d%s",TotalHH,"Total Households");
		filewrite(tempFile,"");
		filewrite(tempFile, "==========================================================");
		filewrite(tempFile,"%-30d%s",totMales,"Total Males");
		filewrite(tempFile,"%-30d%s",totFemales,"Total Females");
		filewrite(tempFile,"%-30d%s",totPopulation,"Total Population");
		filewrite(tempFile,"%-30d%s",postChecked, "Total HH Post Checked");
		filewrite(tempFile,"%-30d%s",seekingApproval, "Total HH Seeking Supervisor's Approval");
		filewrite(tempFile,"***********************************************************");
		filewrite(tempFile,"******end of report for current enumeration area code******");
		filewrite(tempFile,"***********************************************************");
		filewrite(tempFile,"");
	enddo;
	close(tempFile);
	if getos() in 20:29 then
		// Android - use "browse:"
		execsystem(maketext("view:%s", reportFilename));
	else
		// Windows - use "explorer.exe <filename>"
		execsystem(maketext("%sexplorer.exe %s", 
						    pathname(Windows), 
						    reportFilename));
	endif;
end;

function CreateAndRunCSPFF()

	string tempFolder = pathname(Temp);
	string pffFilename = tempFolder + "HouseholdDataEntry.pff";
	string fileDescription = maketext("EA - %s", CONSTITUENCY_EACODE);
	
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 6.2");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=2016 LESOTHO PHC(%s)", fileDescription);

	filewrite(pffFile,"[DataEntryInit]");
	filewrite(pffFile,"Startmode=Modify;%s",IDENTIFIER);
	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%sHouseholdDataEntry.ent", householdApplicationFolder);	
	
	filewrite(pffFile,"InputData=%s",enumeratorDataFilename);
	
	close(pffFile);

	numeric result = execpff(filename(pffFile), stop);
	if result <> 1 then
		errmsg("Failed to launch household data entry");
		reenter;
	endif;

end;


{
Logic for removal of duplicate records from HouseholdDataEntry data files.
Normally this would not be needed as CSPro will not allow the creation of
duplicate cases however due to a bug in an earlier version of CSPro the system
was generating extra copies of a case on partial save. This logic attempts
to remove any of these extra copies from all data files in a directory.
}

// max total cases allowed in single data file
numeric maxCases = 9999; 

// max number of copies of a single case
numeric maxDups = 999;

// stores the list of unique case ids found in the data file
array string caseIds(maxCases);

// stores the starting/ending line #s in data file for each copy of case whose
// id is in corresponding index in caseIds array.
array caseStartLines(maxCases, maxDups);
array caseEndLines(maxCases, maxDups);

// Number of times case with id at corresponding index in caseIds array
// occurs in the data file. This will be the maximum valid index for this
// case in the caseStartLines/caseEndLines/caseNumValidRecords arrays.
array caseNumCopies(maxCases);

// Completeness score for each case.
// First dimension is the case index in caseIds array
// and second index is the copy number which will between
// one and caseNumCopies for the same index.
array caseScores(maxCases, maxDups);

file removeDupsReport, removeDupsInput, removeDupsOutput, removeDupsReportBackup;

// Total number of unique cases found in data file.
// This is actual size of caseIds array.
numeric uniqueCasesInFile = 0;

// Total cases, including duplicates, found in data file.
numeric totalCasesInFile = 0;

list string dataFileListing;

// Return index of case in caseIds array whose
// case id matches the string id.
function findCase(string id)
	numeric i;
	do i = 1 while i <= uniqueCasesInFile
		if caseIds(i) = id then
			findCase = i;
			exit;
		endif;
	enddo;
	findCase = 0;
end;

// Add a case to the caseIds, caseStartLines and caseNumCopies arrays.
function addCase(string id, lineNo)
	numeric caseIndex = findCase(id);
	if caseIndex = 0 then
		// First time we are seeing this case. Add it to the arrays.
		inc(uniqueCasesInFile);
		if uniqueCasesInFile > maxCases then
			errmsg("Max number of cases (%d) exceeded, try breaking this up into smaller files",  maxCases);
			addCase = 0;
			exit;
		endif;
		caseIndex = uniqueCasesInFile;
		caseIds(caseIndex) = id;
		caseNumCopies(caseIndex) = 0;
	endif;
	
	// Update the number of copies found.
	inc(caseNumCopies(caseIndex));
	if caseNumCopies(caseIndex) > maxDups then
		errmsg("Max number of dups per case (%d) exceeded for case %s", maxDups, id);
		addCase = 0;
		exit;
	endif;
	
	// Add the start line for this occurrence of case.
	caseStartLines(caseIndex, caseNumCopies(caseIndex)) = lineNo;
	
	addCase = 1;
end

// Add a end line to caseEndlines array and num valid records for case to caseNumValidRecords array.
function addEndLineAndScore(string id, endLine, score)
	numeric caseIndex = findCase(id);
	caseEndLines(caseIndex, caseNumCopies(caseIndex)) = endLine;
	caseScores(caseIndex, caseNumCopies(caseIndex)) = score;
end;

// Create backup folder as child of baseBackupFolder with current date/time and return path.
function string createBackupFolder(string baseBackupFolder)
	dircreate(baseBackupFolder);
	string folder = maketext("%s%08d%06d/", baseBackupFolder, sysdate("YYYYMMDD"), systime());
	dircreate(folder);
	createBackupFolder = folder;
end;

function string filenameFromPath(string path)
	numeric i;
	do i = length(path) while i >= 1 and not path[i:1] in "/", "\" by -1
	enddo;
	filenameFromPath = path[i + 1];
end;

function backupFile(string dataFilePath, string backupFolder)
	string dataFileName = filenameFromPath(dataFilePath);
	backupFile = filecopy(dataFilePath, backupFolder + dataFileName);
end;

function backupDataFiles(string dataFileFolder, string fileMask, string baseBackupFolder)
    dirlist(dataFileListing,dataFileFolder, fileMask);
	string backupFolder = createBackupFolder(baseBackupFolder);
	numeric result = 1;
	numeric dataFileCtr;
	do dataFileCtr = 1 while dataFileCtr <= length(dataFileListing)
		string dataFilePath = dataFileListing(dataFileCtr);
		if backupFile(dataFilePath, backupFolder) <> 1 then
			result = 0;
		endif;
	enddo;
	backupDataFiles = result;
end;


// Find the copy of the case in the data file that has
// is the most "complete", i.e. has the final result code
// set to complete and/or the most valid records.
// In the case of ties pick the one that comes last in the
// data file. Returns index of the copy in the array
// of start/end lines for the case.
function getCaseCopyToKeep(caseIndex)
	numeric i;
	numeric maxValidIndex = 0;
	numeric maxScore = 0;
	do i = 1 while i <= caseNumCopies(caseIndex)
		numeric score = caseScores(caseIndex, i);
		if score >= maxScore then
			maxValidIndex = i;
			maxScore = score;
		endif;
	enddo;
	getCaseCopyToKeep = maxValidIndex;
end;

function computeRecordScore(string line)

	numeric score = 0;
	string lineRecType = line[1:1];
	if lineRecType = "V" then
		// Final result code gives the most points since
		// a completed case should always win out over an incomplete case
		numeric finalResultCode = tonumber(line[155:1]);
		if finalResultCode = 1 then
			score = score + 10000;
		endif;
		// If result codes are equal then a case with more
		// visits should win
		numeric numberOfVisits = tonumber(line[129:1]);
		if numberOfVisits in 1:3 then
			score = score + 1000 * numberOfVisits;
		endif;
	elseif lineRecType = "H" then
		// Give an additional point for presence of housing record even if
		// it is empty so we keep cases with empty housing and visits over
		// cases with just visits
		score = score + 1;
		// If deaths portion of housing record is filled in then
		// then they got past all invidividuals so the case gets 100 points
		string deathsPart = line[129:3];
		if deathsPart <> "" then
			score = score + 100;
		endif;
		// If housing section is filled in then
		// then they got almost to the end so the case an
		// additional 100
		string housingSectionPart = line[132:135];
		if housingSectionPart <> "" then
			score = score + 100;
		endif;
	elseif lineRecType = "I" then
		// For individual records one point for the name
		// and two points for info beyond the name.
		// Individual record are not weighted highly since
		// often individual records are deleted in later visits.
		string namesPart = line[131:40];
		if namesPart <> "" then
			score = score + 1;
		endif;
		string demographicsPart = line[171:519];
		if demographicsPart <> "" then
			score = score + 2;
		endif;
	elseif lineRecType = "D" then
		// For death records one point for the name
		// and two points for info beyond the name.
		// Death record are not weighted highly since
		// often death records are deleted in later visits.
		namesPart = line[129:30];
		if namesPart <> "" then
			score = score + 1;
		endif;
		demographicsPart = line[159];
		if demographicsPart <> "" then
			score = score + 2;
		endif;
	endif;
	computeRecordScore = score;
end;

// Concatenate all files in dataFileFolder matching fileMask into one file at concatedFilePath.
// It is safe to have concatenated be one of the folders being concatenated.
function concatenateFiles(string dataFileFolder, string fileMask, string concatenatedFilePath)

	// Write to a temp file that we will use to replace the concatenated file once complete.
	string tmpFilePath = dataFileFolder + "tmpDataForRemoveDups.dat";
	
	if fileconcat(tmpFilePath, dataFileFolder + fileMask) then
	
		filedelete(dataFileFolder + fileMask);
		if filerename(tmpFilePath, concatenatedFilePath) = 0 then
			concatenateFiles = 0;
			exit;
		endif;
		concatenateFiles = 1;
	else
		concatenateFiles = 0;
	endif;	
end;

// Remove all duplicate cases in data files in dataFileFolder matching STAFF_EA and
// combine them into a single data file.
// Make backup copies of each data file and put it in subdirectory of baseBackupFolder
// with current date/time.
// Displays a report showing results for each file.
function removeDuplicates(string dataFileFolder, string baseBackupFolder)

	if STAFF_EA = "" then
		errmsg("You must login to use this function");
	endif;
	 
	// Use all files that start with EA code so that we include backups 012345678912p.dat and 012345678912old.dat
	// created by IT coordinators.
	string eaDataFileMask = maketext("%s*.dat", STAFF_EA);

	if not fileexist(dataFileFolder + eaDataFileMask) then
		errmsg("No data files to remove duplicates from");
		exit;	
	endif;
	
	if backupDataFiles(dataFileFolder, eaDataFileMask, baseBackupFolder) = 0 then
		errmsg("Failed to create backup. Unable to remove duplicates");
		exit;
	endif;

	string dataFilePath = dataFileFolder + STAFF_EA + ".dat";	
	
	// Combine the backup and the new files before removing duplicates
	if concatenateFiles(dataFileFolder, eaDataFileMask, dataFilePath) = 0 then
		errmsg("Failed to combine data and backup files. Unable to remove duplicates");
		exit;
	endif;

	string reportFilename = maketext("%sremovedups-report.txt", pathname(Application));
	string reportBackupFilename = maketext("%sremovedups-report.bk", pathname(Application));
	filecopy(reportFilename, reportBackupFilename);
	setfile(removeDupsReport, reportFilename, update);
	
	filewrite(removeDupsReport, "Duplicate removal results");
	filewrite(removeDupsReport, "Folder: %s", dataFileFolder);
	filewrite(removeDupsReport, "Performed: %s at %s", edit("99/99",sysdate("DDMM")), edit("99:99:99",systime()));
	filewrite(removeDupsReport, "");
	
	uniqueCasesInFile = 0;
	totalCasesInFile = 0;
							
	setfile(removeDupsInput, dataFilePath);

	string currentCase = "";
	string lastRecType = "";
	string line;
	numeric lineNo = 0;

	numeric hadError = 0;
				
	numeric caseScore = 0;
			
	// Read through the data file and build the array of cases.
	while fileread(removeDupsInput, line) do
		string lineRecType = line[1:1];
		inc(lineNo);
		
		// Skip deleted records or empty lines (added by IT coordinators editing files in notepad)
		if lineRecType = "~" or line = "" then
			next;
		endif;
		
		// Make sure that this is a known record type, if not this file is really messed up
		// and needs to be looked at
		if not lineRecType in "I", "V", "H", "D" then
			hadError = 1;
			filewrite(removeDupsReport, "Invalid record type found file. Please contact the IT team for help.");
			break; 					
		endif;
		
		string lineCase = line[2:127];
		
		// Check to see if this line is the start of a new case.
		// A new case starts when either the case id is different from
		// the case id on the last line or if the case ids are the same
		// but the record type on the last line was a visits record since
		// visits is always the last record in a case. This captures the case
		// where the duplicates are adjacent in the data file.
		if lineCase <> currentCase or lastRecType = "V" then

			// Add score and end line for last case
			if currentCase <> "" then
				addEndLineAndScore(currentCase, lineNo - 1, caseScore);
				caseScore = 0;
			endif;
				
			currentCase = lineCase;
			if addCase(lineCase, lineNo) = 0 then
				hadError = 1;
				filewrite(removeDupsReport, "Failed to process case %s", lineCase);
				break; 					
			endif;
			inc(totalCasesInFile);

		endif;
		lastRecType = lineRecType;
						
		caseScore = caseScore + computeRecordScore(line);
	enddo;
	
	addEndLineAndScore(currentCase, lineNo, caseScore);
	
	close(removeDupsInput);
		
	// See if we found any duplicate cases.
	numeric i;
	numeric foundDuplicate = 0;
	do i = 1 while i <= uniqueCasesInFile
		if caseNumCopies(i) > 1 then
			foundDuplicate = 1;
			break;
		endif;
	enddo;
	
	if not foundDuplicate then
		filewrite(removeDupsReport, "No duplicates found");
	else
		// Write out list of dups found.
		filewrite(removeDupsReport, "Removed duplicates of the following cases. Please review them for correctness.");
		filewrite(removeDupsReport, "");
		do i = 1 while i <= uniqueCasesInFile
			if caseNumCopies(i) > 1 then
				filewrite(removeDupsReport, "%s", caseIds(i));
{						filewrite(removeDupsReport, "%s: %d occurrences\n", caseIds(i), caseNumCopies(i));
				numeric j;
				do j = 1 while j <= caseNumCopies(i)
					filewrite(removeDupsReport, "    Lines %d-%d: score %d\n", 
						caseStartLines(i, j), 
						caseEndLines(i, j), 
						caseScores(i, j));
				enddo;
				numeric indexOfCopyToKeep = getCaseCopyToKeep(i);
				if indexOfCopyToKeep <> caseNumCopies(i) then
					filewrite(removeDupsReport, "    Copy to keep is not last in file. Using copy at line %d instead of last copy at line %d",
						caseStartLines(i, indexOfCopyToKeep),
						caseStartLines(i, caseNumCopies(i)));
				endif;
}
			endif;
		enddo;
					
		// Write out the new data file with duplicates removed.
		setfile(removeDupsInput, dataFilePath);

		// Write to a temp file that we will use to replace the data file once complete.
		string tmpFilePath = dataFileFolder + "tmpDataForRemoveDups.dat";
		setfile(removeDupsOutput, tmpFilePath, create);
		
		lineNo = 0;
		while fileread(removeDupsInput, line) do
			lineRecType = line[1:1];
			inc(lineNo);
			
			// Skip deleted records or empty lines (added by IT coordinators editing files in notepad)
			if lineRecType = "~" or line = "" then
				next;
			endif;

			lineCase = line[2:127];
			
			// Find the case by id so we can see if it is a duplicate
			numeric caseIndex = findCase(lineCase);
			if caseIndex <= 0 then
				filewrite(removeDupsReport, "Failed to find case %s in cases list from first pass. Skipping file.", lineCase);
				hadError = 1;
				break;
			endif;
			
			// Get the start/end of copy of this case with most valid records.
			numeric indexOfCopyToKeep = getCaseCopyToKeep(caseIndex);
			numeric startLineForCopyToKeep = caseStartLines(caseIndex, indexOfCopyToKeep);
			numeric endLineForCopyToKeep = caseEndLines(caseIndex, indexOfCopyToKeep);
			
			// Only copy the line to the output file if it is part of the copy being kept.
			if lineNo in startLineForCopyToKeep:endLineForCopyToKeep then
			
				// Mark as dups removed
				if caseNumCopies(caseIndex) > 1 and line[1:1] = "V" and line[216:1] <> "" then
					line[270:1] = "1";
				endif;
				
				if filewrite(removeDupsOutput, line) = 0 then
					hadError = 1;
					filewrite(removeDupsReport, "Failed to write to temporary file. Skipping file.");
					break;
				endif;
			endif;
		enddo;
		close(removeDupsInput);
		close(removeDupsOutput);

		if not hadError then
			// Delete the original data file and rename the tmp folder to replace the original
			if filedelete(dataFilePath) <> 1 then
				filewrite(removeDupsReport, "Failed to delete original data file. Skipping file.");
			else
				if filerename(tmpFilePath, dataFilePath) = 0 then
					filewrite(removeDupsReport, "Failed to update original data file. You will need to restore if from the backup file.");					
				endif;
			endif;
		endif;
		filedelete(tmpFilePath);
	endif;

	// Copy log of previous remove duplicates runs from backup report file
	if setfile(removeDupsReportBackup, reportBackupFilename) then
		filewrite(removeDupsReport, "");
		filewrite(removeDupsReport, "-------------------------------");
		filewrite(removeDupsReport, "");
		while fileread(removeDupsReportBackup, line) do
			filewrite(removeDupsReport, line);
		enddo;
		close(removeDupsReportBackup);
	endif;
		
	close(removeDupsReport);
	
	// Display the report
	if getos() in 20:29 then
		// Android - use "browse:"
		execsystem(maketext("view:%s", reportFilename));
	else
		// Windows - use "explorer.exe <filename>"
		execsystem(maketext("%sexplorer.exe %s", 
						    pathname(Windows), 
						    reportFilename));
	endif;
end;


PROC LESOTHOCENSUSMENU_FF
preproc

loginFilename = pathname(Application) + "login.txt";
enumeratorEA = pathname(Application) + "eacode.txt";	
menuApplicationFolder = pathname(Application);
enumeratorDataFileFolder = menuApplicationFolder + "../../Data/Enumerator/";
supervisorDataFileFolder = menuApplicationFolder + "../../Data/Supervisor/";
householdApplicationFolder = menuApplicationFolder + "../HouseholdDataEntry/";
assSupRevApplicationFolder = menuApplicationFolder + "../AssistSupReview/";

dircreate(enumeratorDataFileFolder);
dircreate(supervisorDataFileFolder);
dircreate(householdApplicationFolder);
dircreate(assSupRevApplicationFolder);

// Check to see if user is already logged in
if fileexist(enumeratorEA) = 1 then
	if setfile(tmpFile, enumeratorEA) = 1 then
		string codeString;
		numeric result = fileread(tmpFile, codeString);
		if result = 1 then
			// We have read in ea code from eacode file
			ea = tonumber(codeString);
		endif;
		close(tmpFile);
	endif;
endif;

enumeratorDataFilename = maketext("%s%011d.dat", enumeratorDataFileFolder, ea);

string SDFolder = pathname(CSEntryExternal);

dircreate(SDFolder);
filecopy(enumeratorDataFilename, SDFolder);

PROC USER_CODE
preproc

// Check to see if user is already logged in
if fileexist(loginFilename) = 1 then
	if setfile(tmpFile, loginFilename) = 1 then
		string codeString;
		numeric result = fileread(tmpFile, codeString);
		if result = 1 then
			// We have read in staff code from login file
			// we need to check that it is valid by looking it up in
			// the staff lookup file.
			//STAFF_CODE = tonumber(codeString);
			STAFF_CODE = codeString;
			if loadcase(STAFF_DICT, STAFF_CODE) = 1 then
				// User code from login file is valid, use noinput
				// to avoid entering user code.
				USER_CODE = STAFF_CODE;
				noinput;
			endif;
		endif;
		close(tmpFile);
	endif;
endif;

postproc
// Validate user code is correct
// Go to either enumerator menu or supervisor menu
// depending on the role of the user.

STAFF_CODE = USER_CODE;
if loadcase(STAFF_DICT, STAFF_CODE) = 0 then
	// The code was not found in the staff lookup file.
	errmsg("Invalid user code. Try again.");
	reenter;
else
	// Found the code in the staff lookup file.
	// STAFF_ROLE and STAFF_NAME are now filled in with values
	// from the lookup file.
	if not STAFF_ROLE in 1:3 then
		errmsg("Invalid role");
		reenter;
	else
	
		// Login successfull, save out the staff code
		// so that they don't have to login again until they logout.
		if setfile(tmpFile, loginFilename, create) = 1 then
			filewrite(tmpFile, "%s", STAFF_CODE);
			close(tmpFile);
			
			//Save out the enumeration area for the enumerator so that the assisstant supervisor can use it to postcheck 
			//households
			if STAFF_ROLE = 1 then
				if setfile(tmpFile, enumeratorEA, create) = 1 then
					filewrite(tmpFile, "%s", STAFF_EA);
					close(tmpFile);
				endif;
			endif;
		endif;
				
		
		// Go to appropriate menu for staff role.	
		if STAFF_ROLE = 1 then
			skip to ENUMERATOR_MENU;
		elseif STAFF_ROLE = 2 then
			skip to ASSISTANT_SUPERVISOR_MENU;
		elseif STAFF_ROLE = 3 then
			skip to CONSTITUENCY_SUPERVISOR_MENU;
		endif;
	endif;
endif;

PROC ENUMERATOR_MENU
preproc
userbar(clear);
userbar(add button, "Remove Duplicate Households (Enumerator Data Files)", removeDuplicates(enumeratorDataFileFolder, enumeratorDataFileFolder + "BackupsForDupRemoval/"));
userbar(show);

postproc
if ENUMERATOR_MENU = 1 then		//launch the screen for household data entry
	// Launch data entry
	CreateAndRunPFF();
elseif ENUMERATOR_MENU = 2 then		//send data to the supervisor
	if sync("SyncWithSupervisor.pnc") then
		errmsg("Sync was successful");
		stop(0);
	else
		reenter;
	endif;
elseif ENUMERATOR_MENU = 9 then
	// Logout	
	// Erase login file so that we don't automatically
	// login next time.
	filedelete(loginFilename);	
	// Quit data entry
	stop(1);
endif;

PROC ASSISTANT_SUPERVISOR_MENU
	
postproc
		
if ASSISTANT_SUPERVISOR_MENU in 1:3 and fileexist(enumeratorDataFileName) <> 1 then
	errmsg("The enumerator has not started data entry yet.");
	reenter;
endif;

if ASSISTANT_SUPERVISOR_MENU = 1 then	//option for postchecking households
	skip to CHOOSE_POSTCHECK_HOUSEHOLD;
elseif ASSISTANT_SUPERVISOR_MENU = 2 then //option for viewing status of household completion
	skip to VIEW_DATE;
elseif ASSISTANT_SUPERVISOR_MENU = 3 then //option for reviewing and approving households that were captured as refusals or absent
	skip to APPROVE_CASES;
elseif ASSISTANT_SUPERVISOR_MENU = 9 then
	// Logout
	// Erase login file so that we don't automatically
	// login next time.
	filedelete(loginFilename);
	// Quit data entry
	stop(1);
endif;

PROC CONSTITUENCY_SUPERVISOR_MENU
		
postproc

if CONSTITUENCY_SUPERVISOR_MENU = 1 then	//view data
	skip to CONSTITUENCY_EACODE;
elseif CONSTITUENCY_SUPERVISOR_MENU = 2 then	//sex ratio
	SexRatioReport();
elseif CONSTITUENCY_SUPERVISOR_MENU = 3 then	//population pyramid
	agebysexTable();
elseif CONSTITUENCY_SUPERVISOR_MENU = 4 then	//option for viewing status of household completion
	 skip to VIEW_DATE;  
elseif CONSTITUENCY_SUPERVISOR_MENU = 5 then	//receive data from the enumerator
	if sync("SyncWithEnumerator.pnc") then
		errmsg("Sync was successful");
		stop(0);
	else
		reenter;
	endif;
elseif CONSTITUENCY_SUPERVISOR_MENU = 6 then	//send data to the server
	if sync("SyncWithServer.pnc") then
		errmsg("Sync was successful");
		stop(0);
	else
		reenter;
	endif;
elseif CONSTITUENCY_SUPERVISOR_MENU = 9 then
	// Logout
	// Erase login file so that we don't automatically
	// login next time.
	filedelete(loginFilename);
	
	// Quit data entry
	stop(1);
endif;

reenter;
PROC VIEW_DATE

postproc
if VIEW_DATE = "View all" then
	ShowSummaryReport();
	reenter;
endif;

PROC CHOOSE_REPORT

onfocus
		
numeric i = 2, ctr;
dirlist(fileListing,enumeratorDataFileFolder,"*.dat");
    if length(fileListing) > 0 then
	    mycodes(1) = "View all";
    	mylabels(1) = "View all";
    
		do ctr = 1 while ctr <= length(fileListing)
			string eacode = fileListing(ctr)[length(fileListing(ctr))-14:11];
			mycodes(i) = eacode;
			mylabels(i) = eacode;
			i = i + 1;
	    enddo;
	else
		errmsg("There are no data files found. Please synchronize with the enumerator")
			  select("Sync with enumerator", CONSTITUENCY_SUPERVISOR_MENU, "Logout", CONSTITUENCY_SUPERVISOR_MENU);
	endif;

//mycodes(i) = notappl;
setvalueset(CHOOSE_REPORT, mycodes, mylabels);

postproc
if CHOOSE_REPORT = "View all" then
	//ShowSummaryReport();
	//ShowSummaryReportAllbyDATE(VIEW_DATE)
	ShowSummaryReport_AllbyDATE(VIEW_DATE);
	reenter;
else
	//ShowSummaryReport_EA(CHOOSE_REPORT);
	ShowSummaryReport_EAbyDATE(CHOOSE_REPORT, VIEW_DATE);
	reenter;
endif;

PROC CHOOSE_POSTCHECK_HOUSEHOLD

onfocus
// Create a dynamic value set of all completed households
// in the enumerator data file.

numeric result = setfile(LESOTHOCENSUS2016_DICT, enumeratorDataFileName);

if result <> 1 then
	errmsg("Unable to load enumerator data file");
	reenter ASSISTANT_SUPERVISOR_MENU;
endif;

// Start at first household in enumerator data file
if locate(LESOTHOCENSUS2016_DICT, >=, "") <> 1 then
	errmsg("There are no households in the enumerator data file");
	reenter ASSISTANT_SUPERVISOR_MENU;
endif;

// open the supervisor data file to see if the file has already been postchecked
supervisorDataFilename = getSupervisorDataFilename();
numeric supervisorFileExists = fileexist(supervisorDataFilename) and setfile(ASSIST_SUPERVISOR_REVIEW_DICT,supervisorDataFilename);


// Loop through all households 
// until loadcase returns zero when it hits end of file.
numeric i = 1;
do while loadcase(LESOTHOCENSUS2016_DICT) <> 0
	codes(i) = i;	
	if FINAL_RESULT_CODE = 1 then	
		myID(i) = key(LESOTHOCENSUS2016_DICT);
		labels(i) = maketext("%s", strip(HOUSEHOLD_HEAD_NAMES));
		
		if supervisorFileExists and find(ASSIST_SUPERVISOR_REVIEW_DICT,=,myID(i)) then
			// the household has already been postchecked
			labels(i) = "✓  " + labels(i);
		endif;

		i = i + 1; 
	endif;	
enddo;

if i = 1 then
	errmsg("There are no completed households in the enumerator data file");
	reenter ASSISTANT_SUPERVISOR_MENU;
endif;

codes(i) = notappl;
setvalueset(CHOOSE_POSTCHECK_HOUSEHOLD, codes, labels);
CHOOSE_POSTCHECK_HOUSEHOLD = notappl;

postproc

/////////////////////////////////////

locate(LESOTHOCENSUS2016_DICT, =, myID(CHOOSE_POSTCHECK_HOUSEHOLD));
retrieve(LESOTHOCENSUS2016_DICT);
CreateAndRunSRPFF();

errmsg("Something went horribly wrong. Please contact technical support");
reenter ASSISTANT_SUPERVISOR_MENU;

PROC APPROVE_CASES

onfocus
// Create a dynamic value set of all completed households
// in the enumerator data file.

numeric result = setfile(LESOTHOCENSUS2016_DICT, enumeratorDataFileName);

if result <> 1 then
	errmsg("Unable to load enumerator data file");
	reenter ASSISTANT_SUPERVISOR_MENU;
endif;

// Start at first household in enumerator data file
if locate(LESOTHOCENSUS2016_DICT, >=, "") <> 1 then
	errmsg("There are no households in the enumerator data file");
	reenter ASSISTANT_SUPERVISOR_MENU;
endif;

// Loop through all households 
// until loadcase returns zero when it hits end of file.
numeric i = 1;

do while loadcase(LESOTHOCENSUS2016_DICT) <> 0	
	if HOUSEHOLD_STATUS in 2:5 and APPROVAL_STATUS <> 1 then
		codes(i) = i;
		myID(i) = key(LESOTHOCENSUS2016_DICT);
		labels(i) = maketext("%03d %s  %s", HOUSEHOLD_NUMBER, strip(HOUSEHOLD_HEAD_NAMES), getLabel(HOUSEHOLD_STATUS_VS1, HOUSEHOLD_STATUS));
		i = i + 1;
	elseif MISSING_FERTILITY = 1 and APPROVAL_STATUS <> 1 then
		codes(i) = i;
		myID(i) = key(LESOTHOCENSUS2016_DICT);
		labels(i) = maketext("%03d %s  Missing fertility", HOUSEHOLD_NUMBER, strip(HOUSEHOLD_HEAD_NAMES));
		i = i + 1;
	endif;	
enddo;
if i = 1 then
	errmsg("All cases have been approved");
	reenter ASSISTANT_SUPERVISOR_MENU;
endif;
codes(i) = notappl;
setvalueset(APPROVE_CASES, codes, labels);
APPROVE_CASES = notappl;

postproc
// modify the variable "approved by supervisor" in the household data file
// so that when the enumerator re-visits the household he/she can be able to
// accept the case and complete it.
locate(LESOTHOCENSUS2016_DICT, =, myID(APPROVE_CASES));
retrieve(LESOTHOCENSUS2016_DICT);
APPROVAL_STATUS = 1;
MISSING_FERTILITY = 0;
writecase(LESOTHOCENSUS2016_DICT);
reenter APPROVE_CASES;
PROC CONSTITUENCY_EACODE

onfocus

numeric i, ctr;
dirlist(fileListing,enumeratorDataFileFolder,"*.dat");
    if length(fileListing) > 0 then
	    mycodes(1) = "EA code";
    	mylabels(1) = "EA name";
    
		do ctr = 1 while ctr <= length(fileListing)
			string eacode = fileListing(ctr)[length(fileListing(ctr))-14:11];
			mycodes(ctr) = eacode;
			mylabels(ctr) = eacode;
			//i = i + 1;
	    enddo;
	else
		errmsg("No data files found.");
		stop(1); 
	endif;

//mycodes(i) = notappl;
setvalueset(CONSTITUENCY_EACODE, mycodes, mylabels);

PROC IDENTIFIER

//onfocus
preproc
string HH_status, Checked;
//menuApplicationFolder = pathname(Application); //this is the path of our application
numeric b = dircreate(pathname(Application)+"Temp");

numeric i;   
enumeratorDataFilename = maketext("%s%011s.dat", enumeratorDataFileFolder, CONSTITUENCY_EACODE);
if b = 1 then
	string dataFolderCopy = menuApplicationFolder + "/Temp/";
else
	errmsg("Unable to create a folder");
	reenter CONSTITUENCY_SUPERVISOR_MENU;
endif;

numeric c = filecopy(enumeratorDataFilename, dataFolderCopy);
if c = 1 then
	errmsg("File Copy was successfully made");
else
	errmsg("Unable to create file copy");
	reenter CONSTITUENCY_SUPERVISOR_MENU;
endif;
enumeratorDataFilenameCopy = maketext("%s%011s.dat", dataFolderCopy, CONSTITUENCY_EACODE);
// Create a dynamic value set of all completed households
// in the enumerator data file.	
numeric result = setfile(LESOTHOCENSUS2016_DICT, enumeratorDataFileNameCopy);
if result <> 1 then
	errmsg("Unable to load EA data file");
	reenter CONSTITUENCY_SUPERVISOR_MENU;
endif;

// Start at first household in enumerator data file
locate(LESOTHOCENSUS2016_DICT, >=, "");	
// Loop through all households 
// until loadcase returns zero when it hits end of file.
//numeric i;
do i = 1 while loadcase(LESOTHOCENSUS2016_DICT) <> 0
	
	if HOUSEHOLD_STATUS = 7 then
		if FINAL_RESULT_CODE = 1 then
	   		HH_status = getlabel(FINAL_RESULT_CODE,1);
	   	elseif FINAL_RESULT_CODE = 2 then
	   		HH_status = getlabel(FINAL_RESULT_CODE,2); 
	   	endif;
	else
		if HOUSEHOLD_STATUS = 2 then
			HH_status = getlabel(HOUSEHOLD_STATUS,2);
		elseif HOUSEHOLD_STATUS = 3 then
			HH_status = getlabel(HOUSEHOLD_STATUS,3);
		elseif HOUSEHOLD_STATUS = 4 then
			HH_status = getlabel(HOUSEHOLD_STATUS,4);
		elseif HOUSEHOLD_STATUS = 5 then
			HH_status = getlabel(HOUSEHOLD_STATUS,5);
		endif;
	endif;

	mycodes(i) = Strip(key(LESOTHOCENSUS2016_DICT));
	//mylabels(i)= maketext("%d %S %D %S",VILLAGE_NUMBER,VILLAGE_NAME,HOUSEHOLD_NUMBER,HOUSEHOLD_HEAD_NAMES); 
	mylabels(i)= STRIP(HH_status);
	//maketext("%d",HH_status);
	
enddo;

mycodes(i) = "";

setvalueset(IDENTIFIER, mycodes, mylabels);

//postproc
CreateAndRunCSPFF();

//reenter;

